"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApiStage = exports.createApiDeployment = exports.createApiRoute = exports.createApiIntegration = exports.createApiGateway = void 0;
const cdk = require("aws-cdk-lib");
const environment_1 = require("./environment");
const naming_1 = require("./naming");
const createApiGateway = (name, stack) => new cdk.aws_apigatewayv2.CfnApi(stack, (0, naming_1.makeId)(name), {
    name: (0, naming_1.makeName)(name),
    protocolType: 'HTTP',
    corsConfiguration: {
        allowHeaders: ['Authorization'],
        allowMethods: ['GET', 'POST'],
        allowOrigins: ['*'],
    },
});
exports.createApiGateway = createApiGateway;
const createApiIntegration = (name, props) => new cdk.aws_apigatewayv2.CfnIntegration(props.stack, (0, naming_1.makeId)(name), {
    apiId: cdk.Fn.ref(props.api.logicalId),
    integrationType: 'AWS_PROXY',
    integrationUri: `arn:aws:apigateway:${environment_1.Environment.region()}:lambda:path/2015-03-31/functions/${props.lambda.functionArn}/invocations`,
    integrationMethod: props.integrationMethod,
    payloadFormatVersion: '2.0',
});
exports.createApiIntegration = createApiIntegration;
const createApiRoute = (name, props) => new cdk.aws_apigatewayv2.CfnRoute(props.stack, (0, naming_1.makeId)(name), {
    apiId: cdk.Fn.ref(props.api.logicalId),
    routeKey: props.routeKey,
    authorizationType: 'NONE',
    target: `integrations/${cdk.Fn.ref(props.integration.logicalId)}`,
});
exports.createApiRoute = createApiRoute;
const createApiDeployment = (name, stack, api) => new cdk.aws_apigatewayv2.CfnDeployment(stack, (0, naming_1.makeId)(name), {
    apiId: cdk.Fn.ref(api.logicalId),
});
exports.createApiDeployment = createApiDeployment;
const createApiStage = (name, props) => {
    const apiStage = new cdk.aws_apigatewayv2.CfnStage(props.stack, (0, naming_1.makeId)(name), {
        apiId: cdk.Fn.ref(props.api.logicalId),
        stageName: (0, naming_1.makeName)(name),
        autoDeploy: true,
        deploymentId: cdk.Fn.ref(props.apiDevelopment.logicalId),
        accessLogSettings: {
            destinationArn: props.logGroup.attrArn,
            format: '{ "requestId": "$context.requestId", "path": "$context.path", "routeKey": "$context.routeKey", "ip": "$context.identity.sourceIp", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod","statusCode": $context.status }',
        },
    });
    apiStage.addDependency(props.apiDevelopment);
    apiStage.addDependency(props.logGroup);
    return apiStage;
};
exports.createApiStage = createApiStage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmdhdGV3YXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvYXBpLmdhdGV3YXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQWtDO0FBQ2xDLCtDQUEyQztBQUMzQyxxQ0FBMkM7QUFFcEMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQVksRUFBRSxLQUFnQixFQUFFLEVBQUUsQ0FDakUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFBLGVBQU0sRUFBQyxJQUFJLENBQUMsRUFBRTtJQUNuRCxJQUFJLEVBQUUsSUFBQSxpQkFBUSxFQUFDLElBQUksQ0FBQztJQUNwQixZQUFZLEVBQUUsTUFBTTtJQUNwQixpQkFBaUIsRUFBRTtRQUNqQixZQUFZLEVBQUUsQ0FBQyxlQUFlLENBQUM7UUFDL0IsWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztRQUM3QixZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUM7S0FDcEI7Q0FDRixDQUFDLENBQUE7QUFUUyxRQUFBLGdCQUFnQixvQkFTekI7QUFFRyxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLElBQVksRUFDWixLQUtDLEVBQ0QsRUFBRSxDQUNGLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUEsZUFBTSxFQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2pFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUN0QyxlQUFlLEVBQUUsV0FBVztJQUM1QixjQUFjLEVBQUUsc0JBQXNCLHlCQUFXLENBQUMsTUFBTSxFQUFFLHFDQUN4RCxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQ2YsY0FBYztJQUNkLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7SUFDMUMsb0JBQW9CLEVBQUUsS0FBSztDQUM1QixDQUFDLENBQUE7QUFqQlMsUUFBQSxvQkFBb0Isd0JBaUI3QjtBQUVHLE1BQU0sY0FBYyxHQUFHLENBQzVCLElBQVksRUFDWixLQUtDLEVBQ0QsRUFBRSxDQUNGLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUEsZUFBTSxFQUFDLElBQUksQ0FBQyxFQUFFO0lBQzNELEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUN0QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7SUFDeEIsaUJBQWlCLEVBQUUsTUFBTTtJQUN6QixNQUFNLEVBQUUsZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7Q0FDbEUsQ0FBQyxDQUFBO0FBZFMsUUFBQSxjQUFjLGtCQWN2QjtBQUVHLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxJQUFZLEVBQUUsS0FBZ0IsRUFBRSxHQUFnQyxFQUFFLEVBQUUsQ0FDdEcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFBLGVBQU0sRUFBQyxJQUFJLENBQUMsRUFBRTtJQUMxRCxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztDQUNqQyxDQUFDLENBQUE7QUFIUyxRQUFBLG1CQUFtQix1QkFHNUI7QUFFRyxNQUFNLGNBQWMsR0FBRyxDQUM1QixJQUFZLEVBQ1osS0FLQyxFQUNELEVBQUU7SUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFBLGVBQU0sRUFBQyxJQUFJLENBQUMsRUFBRTtRQUM1RSxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDdEMsU0FBUyxFQUFFLElBQUEsaUJBQVEsRUFBQyxJQUFJLENBQUM7UUFDekIsVUFBVSxFQUFFLElBQUk7UUFDaEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1FBQ3hELGlCQUFpQixFQUFFO1lBQ2pCLGNBQWMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU87WUFDdEMsTUFBTSxFQUNKLCtPQUErTztTQUNsUDtLQUNGLENBQUMsQ0FBQTtJQUNGLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQzVDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3RDLE9BQU8sUUFBUSxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQXZCWSxRQUFBLGNBQWMsa0JBdUIxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IEVudmlyb25tZW50IH0gZnJvbSAnLi9lbnZpcm9ubWVudCdcbmltcG9ydCB7IG1ha2VJZCwgbWFrZU5hbWUgfSBmcm9tICcuL25hbWluZydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFwaUdhdGV3YXkgPSAobmFtZTogc3RyaW5nLCBzdGFjazogY2RrLlN0YWNrKSA9PlxuICBuZXcgY2RrLmF3c19hcGlnYXRld2F5djIuQ2ZuQXBpKHN0YWNrLCBtYWtlSWQobmFtZSksIHtcbiAgICBuYW1lOiBtYWtlTmFtZShuYW1lKSxcbiAgICBwcm90b2NvbFR5cGU6ICdIVFRQJyxcbiAgICBjb3JzQ29uZmlndXJhdGlvbjoge1xuICAgICAgYWxsb3dIZWFkZXJzOiBbJ0F1dGhvcml6YXRpb24nXSxcbiAgICAgIGFsbG93TWV0aG9kczogWydHRVQnLCAnUE9TVCddLFxuICAgICAgYWxsb3dPcmlnaW5zOiBbJyonXSxcbiAgICB9LFxuICB9KVxuXG5leHBvcnQgY29uc3QgY3JlYXRlQXBpSW50ZWdyYXRpb24gPSAoXG4gIG5hbWU6IHN0cmluZyxcbiAgcHJvcHM6IHtcbiAgICBzdGFjazogY2RrLlN0YWNrXG4gICAgaW50ZWdyYXRpb25NZXRob2Q6IHN0cmluZ1xuICAgIGFwaTogY2RrLmF3c19hcGlnYXRld2F5djIuQ2ZuQXBpXG4gICAgbGFtYmRhOiBjZGsuYXdzX2xhbWJkYS5GdW5jdGlvblxuICB9XG4pID0+XG4gIG5ldyBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5JbnRlZ3JhdGlvbihwcm9wcy5zdGFjaywgbWFrZUlkKG5hbWUpLCB7XG4gICAgYXBpSWQ6IGNkay5Gbi5yZWYocHJvcHMuYXBpLmxvZ2ljYWxJZCksXG4gICAgaW50ZWdyYXRpb25UeXBlOiAnQVdTX1BST1hZJyxcbiAgICBpbnRlZ3JhdGlvblVyaTogYGFybjphd3M6YXBpZ2F0ZXdheToke0Vudmlyb25tZW50LnJlZ2lvbigpfTpsYW1iZGE6cGF0aC8yMDE1LTAzLTMxL2Z1bmN0aW9ucy8ke1xuICAgICAgcHJvcHMubGFtYmRhLmZ1bmN0aW9uQXJuXG4gICAgfS9pbnZvY2F0aW9uc2AsXG4gICAgaW50ZWdyYXRpb25NZXRob2Q6IHByb3BzLmludGVncmF0aW9uTWV0aG9kLFxuICAgIHBheWxvYWRGb3JtYXRWZXJzaW9uOiAnMi4wJyxcbiAgfSlcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFwaVJvdXRlID0gKFxuICBuYW1lOiBzdHJpbmcsXG4gIHByb3BzOiB7XG4gICAgc3RhY2s6IGNkay5TdGFja1xuICAgIHJvdXRlS2V5OiBzdHJpbmdcbiAgICBhcGk6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkFwaVxuICAgIGludGVncmF0aW9uOiBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5JbnRlZ3JhdGlvblxuICB9XG4pID0+XG4gIG5ldyBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5Sb3V0ZShwcm9wcy5zdGFjaywgbWFrZUlkKG5hbWUpLCB7XG4gICAgYXBpSWQ6IGNkay5Gbi5yZWYocHJvcHMuYXBpLmxvZ2ljYWxJZCksXG4gICAgcm91dGVLZXk6IHByb3BzLnJvdXRlS2V5LFxuICAgIGF1dGhvcml6YXRpb25UeXBlOiAnTk9ORScsXG4gICAgdGFyZ2V0OiBgaW50ZWdyYXRpb25zLyR7Y2RrLkZuLnJlZihwcm9wcy5pbnRlZ3JhdGlvbi5sb2dpY2FsSWQpfWAsXG4gIH0pXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcGlEZXBsb3ltZW50ID0gKG5hbWU6IHN0cmluZywgc3RhY2s6IGNkay5TdGFjaywgYXBpOiBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5BcGkpID0+XG4gIG5ldyBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5EZXBsb3ltZW50KHN0YWNrLCBtYWtlSWQobmFtZSksIHtcbiAgICBhcGlJZDogY2RrLkZuLnJlZihhcGkubG9naWNhbElkKSxcbiAgfSlcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFwaVN0YWdlID0gKFxuICBuYW1lOiBzdHJpbmcsXG4gIHByb3BzOiB7XG4gICAgc3RhY2s6IGNkay5TdGFja1xuICAgIGFwaTogY2RrLmF3c19hcGlnYXRld2F5djIuQ2ZuQXBpXG4gICAgYXBpRGV2ZWxvcG1lbnQ6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkRlcGxveW1lbnRcbiAgICBsb2dHcm91cDogY2RrLmF3c19sb2dzLkNmbkxvZ0dyb3VwXG4gIH1cbikgPT4ge1xuICBjb25zdCBhcGlTdGFnZSA9IG5ldyBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5TdGFnZShwcm9wcy5zdGFjaywgbWFrZUlkKG5hbWUpLCB7XG4gICAgYXBpSWQ6IGNkay5Gbi5yZWYocHJvcHMuYXBpLmxvZ2ljYWxJZCksXG4gICAgc3RhZ2VOYW1lOiBtYWtlTmFtZShuYW1lKSxcbiAgICBhdXRvRGVwbG95OiB0cnVlLFxuICAgIGRlcGxveW1lbnRJZDogY2RrLkZuLnJlZihwcm9wcy5hcGlEZXZlbG9wbWVudC5sb2dpY2FsSWQpLFxuICAgIGFjY2Vzc0xvZ1NldHRpbmdzOiB7XG4gICAgICBkZXN0aW5hdGlvbkFybjogcHJvcHMubG9nR3JvdXAuYXR0ckFybixcbiAgICAgIGZvcm1hdDpcbiAgICAgICAgJ3sgXCJyZXF1ZXN0SWRcIjogXCIkY29udGV4dC5yZXF1ZXN0SWRcIiwgXCJwYXRoXCI6IFwiJGNvbnRleHQucGF0aFwiLCBcInJvdXRlS2V5XCI6IFwiJGNvbnRleHQucm91dGVLZXlcIiwgXCJpcFwiOiBcIiRjb250ZXh0LmlkZW50aXR5LnNvdXJjZUlwXCIsIFwicmVxdWVzdFRpbWVcIjogXCIkY29udGV4dC5yZXF1ZXN0VGltZVwiLCBcImh0dHBNZXRob2RcIjogXCIkY29udGV4dC5odHRwTWV0aG9kXCIsXCJzdGF0dXNDb2RlXCI6ICRjb250ZXh0LnN0YXR1cyB9JyxcbiAgICB9LFxuICB9KVxuICBhcGlTdGFnZS5hZGREZXBlbmRlbmN5KHByb3BzLmFwaURldmVsb3BtZW50KVxuICBhcGlTdGFnZS5hZGREZXBlbmRlbmN5KHByb3BzLmxvZ0dyb3VwKVxuICByZXR1cm4gYXBpU3RhZ2Vcbn1cbiJdfQ==