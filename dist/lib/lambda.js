import * as cdk from 'aws-cdk-lib';
import { makeId, makeName } from './naming';
export const createSharedLayer = (name, path, stack) => new cdk.aws_lambda.LayerVersion(stack, makeId(name), {
    layerVersionName: makeName(name),
    code: cdk.aws_lambda.Code.fromAsset(path),
    compatibleRuntimes: [cdk.aws_lambda.Runtime.NODEJS_18_X],
});
export const createLambda = (name, props) => new cdk.aws_lambda.Function(props.stack, makeId(name), {
    functionName: makeName(name),
    code: cdk.aws_lambda.Code.fromAsset(props.path),
    handler: props.handler,
    runtime: cdk.aws_lambda.Runtime.NODEJS_18_X,
    timeout: cdk.Duration.seconds(30),
    memorySize: props.memorySize ?? 2048,
    environment: props.environment,
    layers: [props.sharedLayer],
    logRetention: cdk.aws_logs.RetentionDays.THREE_MONTHS,
});
export const createLambdaPermission = (name, stack, lambda) => new cdk.aws_lambda.CfnPermission(stack, makeId(name), {
    action: 'lambda:InvokeFunction',
    functionName: lambda.functionName,
    principal: 'apigateway.amazonaws.com',
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUUzQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQVksRUFBRSxJQUFZLEVBQUUsS0FBZ0IsRUFBRSxFQUFFLENBQ2hGLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNuRCxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3pDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0NBQ3pELENBQUMsQ0FBQTtBQUVKLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUMxQixJQUFZLEVBQ1osS0FPQyxFQUNELEVBQUUsQ0FDRixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3JELFlBQVksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQzVCLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUMvQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87SUFDdEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVc7SUFDM0MsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztJQUNqQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJO0lBQ3BDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztJQUM5QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQzNCLFlBQVksRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZO0NBQ3RELENBQUMsQ0FBQTtBQUVKLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsSUFBWSxFQUFFLEtBQWdCLEVBQUUsTUFBK0IsRUFBRSxFQUFFLENBQ3hHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNwRCxNQUFNLEVBQUUsdUJBQXVCO0lBQy9CLFlBQVksRUFBRSxNQUFNLENBQUMsWUFBWTtJQUNqQyxTQUFTLEVBQUUsMEJBQTBCO0NBQ3RDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IG1ha2VJZCwgbWFrZU5hbWUgfSBmcm9tICcuL25hbWluZydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNoYXJlZExheWVyID0gKG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nLCBzdGFjazogY2RrLlN0YWNrKSA9PlxuICBuZXcgY2RrLmF3c19sYW1iZGEuTGF5ZXJWZXJzaW9uKHN0YWNrLCBtYWtlSWQobmFtZSksIHtcbiAgICBsYXllclZlcnNpb25OYW1lOiBtYWtlTmFtZShuYW1lKSxcbiAgICBjb2RlOiBjZGsuYXdzX2xhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoKSxcbiAgICBjb21wYXRpYmxlUnVudGltZXM6IFtjZGsuYXdzX2xhbWJkYS5SdW50aW1lLk5PREVKU18xOF9YXSxcbiAgfSlcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxhbWJkYSA9IChcbiAgbmFtZTogc3RyaW5nLFxuICBwcm9wczoge1xuICAgIHN0YWNrOiBjZGsuU3RhY2tcbiAgICBzaGFyZWRMYXllcjogY2RrLmF3c19sYW1iZGEuTGF5ZXJWZXJzaW9uXG4gICAgcGF0aDogc3RyaW5nXG4gICAgaGFuZGxlcjogc3RyaW5nXG4gICAgbWVtb3J5U2l6ZT86IG51bWJlclxuICAgIGVudmlyb25tZW50PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxuICB9XG4pID0+XG4gIG5ldyBjZGsuYXdzX2xhbWJkYS5GdW5jdGlvbihwcm9wcy5zdGFjaywgbWFrZUlkKG5hbWUpLCB7XG4gICAgZnVuY3Rpb25OYW1lOiBtYWtlTmFtZShuYW1lKSxcbiAgICBjb2RlOiBjZGsuYXdzX2xhbWJkYS5Db2RlLmZyb21Bc3NldChwcm9wcy5wYXRoKSxcbiAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgIHJ1bnRpbWU6IGNkay5hd3NfbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE4X1gsXG4gICAgdGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApLFxuICAgIG1lbW9yeVNpemU6IHByb3BzLm1lbW9yeVNpemUgPz8gMjA0OCxcbiAgICBlbnZpcm9ubWVudDogcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgbGF5ZXJzOiBbcHJvcHMuc2hhcmVkTGF5ZXJdLFxuICAgIGxvZ1JldGVudGlvbjogY2RrLmF3c19sb2dzLlJldGVudGlvbkRheXMuVEhSRUVfTU9OVEhTLFxuICB9KVxuXG5leHBvcnQgY29uc3QgY3JlYXRlTGFtYmRhUGVybWlzc2lvbiA9IChuYW1lOiBzdHJpbmcsIHN0YWNrOiBjZGsuU3RhY2ssIGxhbWJkYTogY2RrLmF3c19sYW1iZGEuRnVuY3Rpb24pID0+XG4gIG5ldyBjZGsuYXdzX2xhbWJkYS5DZm5QZXJtaXNzaW9uKHN0YWNrLCBtYWtlSWQobmFtZSksIHtcbiAgICBhY3Rpb246ICdsYW1iZGE6SW52b2tlRnVuY3Rpb24nLFxuICAgIGZ1bmN0aW9uTmFtZTogbGFtYmRhLmZ1bmN0aW9uTmFtZSxcbiAgICBwcmluY2lwYWw6ICdhcGlnYXRld2F5LmFtYXpvbmF3cy5jb20nLFxuICB9KVxuIl19