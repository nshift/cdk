import { createApiDeployment, createApiGateway, createApiIntegration, createApiRoute, createApiStage, } from './api.gateway';
import { createLambda, createLambdaPermission } from './lambda';
import { createLogGroup } from './log';
export const createApi = (stack) => createApiGateway('Api', stack);
export const deployApi = (stack, api, dependencies) => {
    const apiDevelopment = createApiDeployment('ApiDevelopment', stack, api);
    dependencies.forEach((dependency) => apiDevelopment.addDependency(dependency));
    const logGroup = createLogGroup('LogGroup', stack, api);
    const apiStage = createApiStage('ApiStageName', { stack, api, apiDevelopment, logGroup });
    return {
        apiDevelopment,
        logGroup,
        apiStage,
    };
};
export const createEndpoint = (prefix, props) => {
    const lambda = createLambda(`${prefix}Function`, {
        path: props.codeUri,
        handler: props.handler,
        environment: props.environment,
        stack: props.stack,
        sharedLayer: props.sharedLayer,
    });
    const integration = createApiIntegration(`${prefix}Integration`, {
        integrationMethod: props.method,
        stack: props.stack,
        api: props.api,
        lambda: lambda,
    });
    const route = createApiRoute(`${prefix}Route`, {
        routeKey: `${props.method} ${props.path}`,
        stack: props.stack,
        api: props.api,
        integration: integration,
    });
    route.addDependency(integration);
    const lambdaPermission = createLambdaPermission(`${prefix}Permission`, props.stack, lambda);
    return { lambda, integration, route, lambdaPermission };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsY0FBYyxFQUNkLGNBQWMsR0FDZixNQUFNLGVBQWUsQ0FBQTtBQUN0QixPQUFPLEVBQUUsWUFBWSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBRTdFLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsR0FBZ0MsRUFBRSxZQUErQixFQUFFLEVBQUU7SUFDL0csTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3hFLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtJQUM5RSxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtJQUN2RCxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsY0FBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtJQUN6RixPQUFPO1FBQ0wsY0FBYztRQUNkLFFBQVE7UUFDUixRQUFRO0tBQ1QsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixNQUFjLEVBQ2QsS0FTQyxFQUNELEVBQUU7SUFDRixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsR0FBRyxNQUFNLFVBQVUsRUFBRTtRQUMvQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDbkIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ3RCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztRQUM5QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7UUFDbEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO0tBQy9CLENBQUMsQ0FBQTtJQUNGLE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLEdBQUcsTUFBTSxhQUFhLEVBQUU7UUFDL0QsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLE1BQU07UUFDL0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztRQUNkLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLEdBQUcsTUFBTSxPQUFPLEVBQUU7UUFDN0MsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3pDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztRQUNsQixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7UUFDZCxXQUFXLEVBQUUsV0FBVztLQUN6QixDQUFDLENBQUE7SUFDRixLQUFLLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxNQUFNLFlBQVksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNGLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFBO0FBQ3pELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7XG4gIGNyZWF0ZUFwaURlcGxveW1lbnQsXG4gIGNyZWF0ZUFwaUdhdGV3YXksXG4gIGNyZWF0ZUFwaUludGVncmF0aW9uLFxuICBjcmVhdGVBcGlSb3V0ZSxcbiAgY3JlYXRlQXBpU3RhZ2UsXG59IGZyb20gJy4vYXBpLmdhdGV3YXknXG5pbXBvcnQgeyBjcmVhdGVMYW1iZGEsIGNyZWF0ZUxhbWJkYVBlcm1pc3Npb24gfSBmcm9tICcuL2xhbWJkYSdcbmltcG9ydCB7IGNyZWF0ZUxvZ0dyb3VwIH0gZnJvbSAnLi9sb2cnXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcGkgPSAoc3RhY2s6IGNkay5TdGFjaykgPT4gY3JlYXRlQXBpR2F0ZXdheSgnQXBpJywgc3RhY2spXG5cbmV4cG9ydCBjb25zdCBkZXBsb3lBcGkgPSAoc3RhY2s6IGNkay5TdGFjaywgYXBpOiBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5BcGksIGRlcGVuZGVuY2llczogY2RrLkNmblJlc291cmNlW10pID0+IHtcbiAgY29uc3QgYXBpRGV2ZWxvcG1lbnQgPSBjcmVhdGVBcGlEZXBsb3ltZW50KCdBcGlEZXZlbG9wbWVudCcsIHN0YWNrLCBhcGkpXG4gIGRlcGVuZGVuY2llcy5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiBhcGlEZXZlbG9wbWVudC5hZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpKVxuICBjb25zdCBsb2dHcm91cCA9IGNyZWF0ZUxvZ0dyb3VwKCdMb2dHcm91cCcsIHN0YWNrLCBhcGkpXG4gIGNvbnN0IGFwaVN0YWdlID0gY3JlYXRlQXBpU3RhZ2UoJ0FwaVN0YWdlTmFtZScsIHsgc3RhY2ssIGFwaSwgYXBpRGV2ZWxvcG1lbnQsIGxvZ0dyb3VwIH0pXG4gIHJldHVybiB7XG4gICAgYXBpRGV2ZWxvcG1lbnQsXG4gICAgbG9nR3JvdXAsXG4gICAgYXBpU3RhZ2UsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuZHBvaW50ID0gKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgcHJvcHM6IHtcbiAgICBjb2RlVXJpOiBzdHJpbmdcbiAgICBoYW5kbGVyOiBzdHJpbmdcbiAgICBtZXRob2Q6IHN0cmluZ1xuICAgIHBhdGg6IHN0cmluZ1xuICAgIHN0YWNrOiBjZGsuU3RhY2tcbiAgICBhcGk6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkFwaVxuICAgIHNoYXJlZExheWVyOiBjZGsuYXdzX2xhbWJkYS5MYXllclZlcnNpb25cbiAgICBlbnZpcm9ubWVudD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbiAgfVxuKSA9PiB7XG4gIGNvbnN0IGxhbWJkYSA9IGNyZWF0ZUxhbWJkYShgJHtwcmVmaXh9RnVuY3Rpb25gLCB7XG4gICAgcGF0aDogcHJvcHMuY29kZVVyaSxcbiAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICBzdGFjazogcHJvcHMuc3RhY2ssXG4gICAgc2hhcmVkTGF5ZXI6IHByb3BzLnNoYXJlZExheWVyLFxuICB9KVxuICBjb25zdCBpbnRlZ3JhdGlvbiA9IGNyZWF0ZUFwaUludGVncmF0aW9uKGAke3ByZWZpeH1JbnRlZ3JhdGlvbmAsIHtcbiAgICBpbnRlZ3JhdGlvbk1ldGhvZDogcHJvcHMubWV0aG9kLFxuICAgIHN0YWNrOiBwcm9wcy5zdGFjayxcbiAgICBhcGk6IHByb3BzLmFwaSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgfSlcbiAgY29uc3Qgcm91dGUgPSBjcmVhdGVBcGlSb3V0ZShgJHtwcmVmaXh9Um91dGVgLCB7XG4gICAgcm91dGVLZXk6IGAke3Byb3BzLm1ldGhvZH0gJHtwcm9wcy5wYXRofWAsXG4gICAgc3RhY2s6IHByb3BzLnN0YWNrLFxuICAgIGFwaTogcHJvcHMuYXBpLFxuICAgIGludGVncmF0aW9uOiBpbnRlZ3JhdGlvbixcbiAgfSlcbiAgcm91dGUuYWRkRGVwZW5kZW5jeShpbnRlZ3JhdGlvbilcbiAgY29uc3QgbGFtYmRhUGVybWlzc2lvbiA9IGNyZWF0ZUxhbWJkYVBlcm1pc3Npb24oYCR7cHJlZml4fVBlcm1pc3Npb25gLCBwcm9wcy5zdGFjaywgbGFtYmRhKVxuICByZXR1cm4geyBsYW1iZGEsIGludGVncmF0aW9uLCByb3V0ZSwgbGFtYmRhUGVybWlzc2lvbiB9XG59XG4iXX0=