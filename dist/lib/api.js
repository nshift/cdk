"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEndpoint = exports.deployApi = exports.createApi = void 0;
const api_gateway_1 = require("./api.gateway");
const lambda_1 = require("./lambda");
const log_1 = require("./log");
const createApi = (stack) => (0, api_gateway_1.createApiGateway)('Api', stack);
exports.createApi = createApi;
const deployApi = (stack, api, dependencies) => {
    const apiDevelopment = (0, api_gateway_1.createApiDeployment)('ApiDevelopment', stack, api);
    dependencies.forEach((dependency) => apiDevelopment.addDependency(dependency));
    const logGroup = (0, log_1.createLogGroup)('LogGroup', stack, api);
    const apiStage = (0, api_gateway_1.createApiStage)('ApiStageName', { stack, api, apiDevelopment, logGroup });
    return {
        apiDevelopment,
        logGroup,
        apiStage,
    };
};
exports.deployApi = deployApi;
const createEndpoint = (prefix, props) => {
    const lambda = (0, lambda_1.createLambda)(`${prefix}Function`, {
        path: props.codeUri,
        handler: props.handler,
        environment: props.environment,
        stack: props.stack,
        sharedLayer: props.sharedLayer,
        memorySize: props.memorySize,
    });
    const integration = (0, api_gateway_1.createApiIntegration)(`${prefix}Integration`, {
        integrationMethod: props.method,
        stack: props.stack,
        api: props.api,
        lambda: lambda,
    });
    const route = (0, api_gateway_1.createApiRoute)(`${prefix}Route`, {
        routeKey: `${props.method} ${props.path}`,
        stack: props.stack,
        api: props.api,
        integration: integration,
    });
    route.addDependency(integration);
    const lambdaPermission = (0, lambda_1.createLambdaPermission)(`${prefix}Permission`, props.stack, lambda);
    return { lambda, integration, route, lambdaPermission };
};
exports.createEndpoint = createEndpoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FNc0I7QUFDdEIscUNBQStEO0FBQy9ELCtCQUFzQztBQUUvQixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUEsOEJBQWdCLEVBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQWhFLFFBQUEsU0FBUyxhQUF1RDtBQUV0RSxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsR0FBZ0MsRUFBRSxZQUErQixFQUFFLEVBQUU7SUFDL0csTUFBTSxjQUFjLEdBQUcsSUFBQSxpQ0FBbUIsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDeEUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzlFLE1BQU0sUUFBUSxHQUFHLElBQUEsb0JBQWMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLElBQUEsNEJBQWMsRUFBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ3pGLE9BQU87UUFDTCxjQUFjO1FBQ2QsUUFBUTtRQUNSLFFBQVE7S0FDVCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBVlksUUFBQSxTQUFTLGFBVXJCO0FBRU0sTUFBTSxjQUFjLEdBQUcsQ0FDNUIsTUFBYyxFQUNkLEtBVUMsRUFDRCxFQUFFO0lBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLEdBQUcsTUFBTSxVQUFVLEVBQUU7UUFDL0MsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ25CLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztRQUN0QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztRQUM5QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7S0FDN0IsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxXQUFXLEdBQUcsSUFBQSxrQ0FBb0IsRUFBQyxHQUFHLE1BQU0sYUFBYSxFQUFFO1FBQy9ELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxNQUFNO1FBQy9CLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztRQUNsQixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7UUFDZCxNQUFNLEVBQUUsTUFBTTtLQUNmLENBQUMsQ0FBQTtJQUNGLE1BQU0sS0FBSyxHQUFHLElBQUEsNEJBQWMsRUFBQyxHQUFHLE1BQU0sT0FBTyxFQUFFO1FBQzdDLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtRQUN6QyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7UUFDbEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1FBQ2QsV0FBVyxFQUFFLFdBQVc7S0FDekIsQ0FBQyxDQUFBO0lBQ0YsS0FBSyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNoQyxNQUFNLGdCQUFnQixHQUFHLElBQUEsK0JBQXNCLEVBQUMsR0FBRyxNQUFNLFlBQVksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNGLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFBO0FBQ3pELENBQUMsQ0FBQTtBQXJDWSxRQUFBLGNBQWMsa0JBcUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7XG4gIGNyZWF0ZUFwaURlcGxveW1lbnQsXG4gIGNyZWF0ZUFwaUdhdGV3YXksXG4gIGNyZWF0ZUFwaUludGVncmF0aW9uLFxuICBjcmVhdGVBcGlSb3V0ZSxcbiAgY3JlYXRlQXBpU3RhZ2UsXG59IGZyb20gJy4vYXBpLmdhdGV3YXknXG5pbXBvcnQgeyBjcmVhdGVMYW1iZGEsIGNyZWF0ZUxhbWJkYVBlcm1pc3Npb24gfSBmcm9tICcuL2xhbWJkYSdcbmltcG9ydCB7IGNyZWF0ZUxvZ0dyb3VwIH0gZnJvbSAnLi9sb2cnXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcGkgPSAoc3RhY2s6IGNkay5TdGFjaykgPT4gY3JlYXRlQXBpR2F0ZXdheSgnQXBpJywgc3RhY2spXG5cbmV4cG9ydCBjb25zdCBkZXBsb3lBcGkgPSAoc3RhY2s6IGNkay5TdGFjaywgYXBpOiBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5BcGksIGRlcGVuZGVuY2llczogY2RrLkNmblJlc291cmNlW10pID0+IHtcbiAgY29uc3QgYXBpRGV2ZWxvcG1lbnQgPSBjcmVhdGVBcGlEZXBsb3ltZW50KCdBcGlEZXZlbG9wbWVudCcsIHN0YWNrLCBhcGkpXG4gIGRlcGVuZGVuY2llcy5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiBhcGlEZXZlbG9wbWVudC5hZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpKVxuICBjb25zdCBsb2dHcm91cCA9IGNyZWF0ZUxvZ0dyb3VwKCdMb2dHcm91cCcsIHN0YWNrLCBhcGkpXG4gIGNvbnN0IGFwaVN0YWdlID0gY3JlYXRlQXBpU3RhZ2UoJ0FwaVN0YWdlTmFtZScsIHsgc3RhY2ssIGFwaSwgYXBpRGV2ZWxvcG1lbnQsIGxvZ0dyb3VwIH0pXG4gIHJldHVybiB7XG4gICAgYXBpRGV2ZWxvcG1lbnQsXG4gICAgbG9nR3JvdXAsXG4gICAgYXBpU3RhZ2UsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuZHBvaW50ID0gKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgcHJvcHM6IHtcbiAgICBjb2RlVXJpOiBzdHJpbmdcbiAgICBoYW5kbGVyOiBzdHJpbmdcbiAgICBtZXRob2Q6IHN0cmluZ1xuICAgIHBhdGg6IHN0cmluZ1xuICAgIHN0YWNrOiBjZGsuU3RhY2tcbiAgICBhcGk6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkFwaVxuICAgIHNoYXJlZExheWVyOiBjZGsuYXdzX2xhbWJkYS5MYXllclZlcnNpb25cbiAgICBtZW1vcnlTaXplPzogbnVtYmVyXG4gICAgZW52aXJvbm1lbnQ/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9XG4gIH1cbikgPT4ge1xuICBjb25zdCBsYW1iZGEgPSBjcmVhdGVMYW1iZGEoYCR7cHJlZml4fUZ1bmN0aW9uYCwge1xuICAgIHBhdGg6IHByb3BzLmNvZGVVcmksXG4gICAgaGFuZGxlcjogcHJvcHMuaGFuZGxlcixcbiAgICBlbnZpcm9ubWVudDogcHJvcHMuZW52aXJvbm1lbnQsXG4gICAgc3RhY2s6IHByb3BzLnN0YWNrLFxuICAgIHNoYXJlZExheWVyOiBwcm9wcy5zaGFyZWRMYXllcixcbiAgICBtZW1vcnlTaXplOiBwcm9wcy5tZW1vcnlTaXplLFxuICB9KVxuICBjb25zdCBpbnRlZ3JhdGlvbiA9IGNyZWF0ZUFwaUludGVncmF0aW9uKGAke3ByZWZpeH1JbnRlZ3JhdGlvbmAsIHtcbiAgICBpbnRlZ3JhdGlvbk1ldGhvZDogcHJvcHMubWV0aG9kLFxuICAgIHN0YWNrOiBwcm9wcy5zdGFjayxcbiAgICBhcGk6IHByb3BzLmFwaSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgfSlcbiAgY29uc3Qgcm91dGUgPSBjcmVhdGVBcGlSb3V0ZShgJHtwcmVmaXh9Um91dGVgLCB7XG4gICAgcm91dGVLZXk6IGAke3Byb3BzLm1ldGhvZH0gJHtwcm9wcy5wYXRofWAsXG4gICAgc3RhY2s6IHByb3BzLnN0YWNrLFxuICAgIGFwaTogcHJvcHMuYXBpLFxuICAgIGludGVncmF0aW9uOiBpbnRlZ3JhdGlvbixcbiAgfSlcbiAgcm91dGUuYWRkRGVwZW5kZW5jeShpbnRlZ3JhdGlvbilcbiAgY29uc3QgbGFtYmRhUGVybWlzc2lvbiA9IGNyZWF0ZUxhbWJkYVBlcm1pc3Npb24oYCR7cHJlZml4fVBlcm1pc3Npb25gLCBwcm9wcy5zdGFjaywgbGFtYmRhKVxuICByZXR1cm4geyBsYW1iZGEsIGludGVncmF0aW9uLCByb3V0ZSwgbGFtYmRhUGVybWlzc2lvbiB9XG59XG4iXX0=