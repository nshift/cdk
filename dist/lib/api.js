"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEndpoint = exports.deployApi = exports.createApi = void 0;
const api_gateway_1 = require("./api.gateway");
const lambda_1 = require("./lambda");
const log_1 = require("./log");
const createApi = (stack, allowHeaders) => (0, api_gateway_1.createApiGateway)('Api', stack, allowHeaders);
exports.createApi = createApi;
const deployApi = (stack, api, dependencies) => {
    const apiDevelopment = (0, api_gateway_1.createApiDeployment)('ApiDevelopment', stack, api);
    dependencies.forEach((dependency) => apiDevelopment.addDependency(dependency));
    const logGroup = (0, log_1.createLogGroup)('LogGroup', stack, api);
    const apiStage = (0, api_gateway_1.createApiStage)('ApiStageName', { stack, api, apiDevelopment, logGroup });
    return {
        apiDevelopment,
        logGroup,
        apiStage,
    };
};
exports.deployApi = deployApi;
const createEndpoint = (prefix, props) => {
    const lambda = (0, lambda_1.createLambda)(`${prefix}Function`, {
        path: props.codeUri,
        handler: props.handler,
        environment: props.environment,
        stack: props.stack,
        sharedLayer: props.sharedLayer,
        memorySize: props.memorySize,
    });
    const integration = (0, api_gateway_1.createApiIntegration)(`${prefix}Integration`, {
        integrationMethod: props.method,
        stack: props.stack,
        api: props.api,
        lambda: lambda,
    });
    const route = (0, api_gateway_1.createApiRoute)(`${prefix}Route`, {
        routeKey: `${props.method} ${props.path}`,
        stack: props.stack,
        api: props.api,
        integration: integration,
    });
    route.addDependency(integration);
    const lambdaPermission = (0, lambda_1.createLambdaPermission)(`${prefix}Permission`, props.stack, lambda);
    return { lambda, integration, route, lambdaPermission };
};
exports.createEndpoint = createEndpoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FNc0I7QUFDdEIscUNBQStEO0FBQy9ELCtCQUFzQztBQUUvQixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsWUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBQSw4QkFBZ0IsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBQXRHLFFBQUEsU0FBUyxhQUE2RjtBQUU1RyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsR0FBZ0MsRUFBRSxZQUErQixFQUFFLEVBQUU7SUFDL0csTUFBTSxjQUFjLEdBQUcsSUFBQSxpQ0FBbUIsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDeEUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzlFLE1BQU0sUUFBUSxHQUFHLElBQUEsb0JBQWMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLElBQUEsNEJBQWMsRUFBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ3pGLE9BQU87UUFDTCxjQUFjO1FBQ2QsUUFBUTtRQUNSLFFBQVE7S0FDVCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBVlksUUFBQSxTQUFTLGFBVXJCO0FBRU0sTUFBTSxjQUFjLEdBQUcsQ0FDNUIsTUFBYyxFQUNkLEtBVUMsRUFDRCxFQUFFO0lBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLEdBQUcsTUFBTSxVQUFVLEVBQUU7UUFDL0MsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ25CLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztRQUN0QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztRQUM5QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7S0FDN0IsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxXQUFXLEdBQUcsSUFBQSxrQ0FBb0IsRUFBQyxHQUFHLE1BQU0sYUFBYSxFQUFFO1FBQy9ELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxNQUFNO1FBQy9CLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztRQUNsQixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7UUFDZCxNQUFNLEVBQUUsTUFBTTtLQUNmLENBQUMsQ0FBQTtJQUNGLE1BQU0sS0FBSyxHQUFHLElBQUEsNEJBQWMsRUFBQyxHQUFHLE1BQU0sT0FBTyxFQUFFO1FBQzdDLFFBQVEsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtRQUN6QyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7UUFDbEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1FBQ2QsV0FBVyxFQUFFLFdBQVc7S0FDekIsQ0FBQyxDQUFBO0lBQ0YsS0FBSyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNoQyxNQUFNLGdCQUFnQixHQUFHLElBQUEsK0JBQXNCLEVBQUMsR0FBRyxNQUFNLFlBQVksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNGLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFBO0FBQ3pELENBQUMsQ0FBQTtBQXJDWSxRQUFBLGNBQWMsa0JBcUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7XG4gIGNyZWF0ZUFwaURlcGxveW1lbnQsXG4gIGNyZWF0ZUFwaUdhdGV3YXksXG4gIGNyZWF0ZUFwaUludGVncmF0aW9uLFxuICBjcmVhdGVBcGlSb3V0ZSxcbiAgY3JlYXRlQXBpU3RhZ2UsXG59IGZyb20gJy4vYXBpLmdhdGV3YXknXG5pbXBvcnQgeyBjcmVhdGVMYW1iZGEsIGNyZWF0ZUxhbWJkYVBlcm1pc3Npb24gfSBmcm9tICcuL2xhbWJkYSdcbmltcG9ydCB7IGNyZWF0ZUxvZ0dyb3VwIH0gZnJvbSAnLi9sb2cnXG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcGkgPSAoc3RhY2s6IGNkay5TdGFjaywgYWxsb3dIZWFkZXJzOiBzdHJpbmdbXSkgPT4gY3JlYXRlQXBpR2F0ZXdheSgnQXBpJywgc3RhY2ssIGFsbG93SGVhZGVycylcblxuZXhwb3J0IGNvbnN0IGRlcGxveUFwaSA9IChzdGFjazogY2RrLlN0YWNrLCBhcGk6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkFwaSwgZGVwZW5kZW5jaWVzOiBjZGsuQ2ZuUmVzb3VyY2VbXSkgPT4ge1xuICBjb25zdCBhcGlEZXZlbG9wbWVudCA9IGNyZWF0ZUFwaURlcGxveW1lbnQoJ0FwaURldmVsb3BtZW50Jywgc3RhY2ssIGFwaSlcbiAgZGVwZW5kZW5jaWVzLmZvckVhY2goKGRlcGVuZGVuY3kpID0+IGFwaURldmVsb3BtZW50LmFkZERlcGVuZGVuY3koZGVwZW5kZW5jeSkpXG4gIGNvbnN0IGxvZ0dyb3VwID0gY3JlYXRlTG9nR3JvdXAoJ0xvZ0dyb3VwJywgc3RhY2ssIGFwaSlcbiAgY29uc3QgYXBpU3RhZ2UgPSBjcmVhdGVBcGlTdGFnZSgnQXBpU3RhZ2VOYW1lJywgeyBzdGFjaywgYXBpLCBhcGlEZXZlbG9wbWVudCwgbG9nR3JvdXAgfSlcbiAgcmV0dXJuIHtcbiAgICBhcGlEZXZlbG9wbWVudCxcbiAgICBsb2dHcm91cCxcbiAgICBhcGlTdGFnZSxcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlRW5kcG9pbnQgPSAoXG4gIHByZWZpeDogc3RyaW5nLFxuICBwcm9wczoge1xuICAgIGNvZGVVcmk6IHN0cmluZ1xuICAgIGhhbmRsZXI6IHN0cmluZ1xuICAgIG1ldGhvZDogc3RyaW5nXG4gICAgcGF0aDogc3RyaW5nXG4gICAgc3RhY2s6IGNkay5TdGFja1xuICAgIGFwaTogY2RrLmF3c19hcGlnYXRld2F5djIuQ2ZuQXBpXG4gICAgc2hhcmVkTGF5ZXI6IGNkay5hd3NfbGFtYmRhLkxheWVyVmVyc2lvblxuICAgIG1lbW9yeVNpemU/OiBudW1iZXJcbiAgICBlbnZpcm9ubWVudD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbiAgfVxuKSA9PiB7XG4gIGNvbnN0IGxhbWJkYSA9IGNyZWF0ZUxhbWJkYShgJHtwcmVmaXh9RnVuY3Rpb25gLCB7XG4gICAgcGF0aDogcHJvcHMuY29kZVVyaSxcbiAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICBzdGFjazogcHJvcHMuc3RhY2ssXG4gICAgc2hhcmVkTGF5ZXI6IHByb3BzLnNoYXJlZExheWVyLFxuICAgIG1lbW9yeVNpemU6IHByb3BzLm1lbW9yeVNpemUsXG4gIH0pXG4gIGNvbnN0IGludGVncmF0aW9uID0gY3JlYXRlQXBpSW50ZWdyYXRpb24oYCR7cHJlZml4fUludGVncmF0aW9uYCwge1xuICAgIGludGVncmF0aW9uTWV0aG9kOiBwcm9wcy5tZXRob2QsXG4gICAgc3RhY2s6IHByb3BzLnN0YWNrLFxuICAgIGFwaTogcHJvcHMuYXBpLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICB9KVxuICBjb25zdCByb3V0ZSA9IGNyZWF0ZUFwaVJvdXRlKGAke3ByZWZpeH1Sb3V0ZWAsIHtcbiAgICByb3V0ZUtleTogYCR7cHJvcHMubWV0aG9kfSAke3Byb3BzLnBhdGh9YCxcbiAgICBzdGFjazogcHJvcHMuc3RhY2ssXG4gICAgYXBpOiBwcm9wcy5hcGksXG4gICAgaW50ZWdyYXRpb246IGludGVncmF0aW9uLFxuICB9KVxuICByb3V0ZS5hZGREZXBlbmRlbmN5KGludGVncmF0aW9uKVxuICBjb25zdCBsYW1iZGFQZXJtaXNzaW9uID0gY3JlYXRlTGFtYmRhUGVybWlzc2lvbihgJHtwcmVmaXh9UGVybWlzc2lvbmAsIHByb3BzLnN0YWNrLCBsYW1iZGEpXG4gIHJldHVybiB7IGxhbWJkYSwgaW50ZWdyYXRpb24sIHJvdXRlLCBsYW1iZGFQZXJtaXNzaW9uIH1cbn1cbiJdfQ==