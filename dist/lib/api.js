"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEndpoint = exports.deployApi = exports.createApi = void 0;
const api_gateway_1 = require("./api.gateway");
const lambda_1 = require("./lambda");
const log_1 = require("./log");
const createApi = (stack, allowHeaders) => (0, api_gateway_1.createApiGateway)('Api', stack, allowHeaders);
exports.createApi = createApi;
const deployApi = (stack, api, dependencies) => {
    const apiDevelopment = (0, api_gateway_1.createApiDeployment)('ApiDevelopment', stack, api);
    dependencies.forEach((dependency) => apiDevelopment.addDependency(dependency));
    const logGroup = (0, log_1.createLogGroup)('LogGroup', stack, api);
    const apiStage = (0, api_gateway_1.createApiStage)('ApiStageName', { stack, api, apiDevelopment, logGroup });
    return {
        apiDevelopment,
        logGroup,
        apiStage,
    };
};
exports.deployApi = deployApi;
const createEndpoint = (prefix, props) => {
    const lambda = (0, lambda_1.createLambda)(`${prefix}Function`, {
        path: props.codeUri,
        handler: props.handler,
        environment: props.environment,
        stack: props.stack,
        sharedLayer: props.sharedLayer,
        runtime: props.runtime,
        memorySize: props.memorySize,
    });
    const integration = (0, api_gateway_1.createApiIntegration)(`${prefix}Integration`, {
        integrationMethod: props.method,
        stack: props.stack,
        api: props.api,
        lambda: lambda,
    });
    const route = (0, api_gateway_1.createApiRoute)(`${prefix}Route`, {
        routeKey: `${props.method} ${props.path}`,
        stack: props.stack,
        api: props.api,
        integration: integration,
    });
    route.addDependency(integration);
    const lambdaPermission = (0, lambda_1.createLambdaPermission)(`${prefix}Permission`, props.stack, lambda);
    return { lambda, integration, route, lambdaPermission };
};
exports.createEndpoint = createEndpoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQ0FNc0I7QUFDdEIscUNBQStEO0FBQy9ELCtCQUFzQztBQUUvQixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsWUFBc0IsRUFBRSxFQUFFLENBQUMsSUFBQSw4QkFBZ0IsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFBO0FBQXRHLFFBQUEsU0FBUyxhQUE2RjtBQUU1RyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWdCLEVBQUUsR0FBZ0MsRUFBRSxZQUErQixFQUFFLEVBQUU7SUFDL0csTUFBTSxjQUFjLEdBQUcsSUFBQSxpQ0FBbUIsRUFBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDeEUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0lBQzlFLE1BQU0sUUFBUSxHQUFHLElBQUEsb0JBQWMsRUFBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLElBQUEsNEJBQWMsRUFBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO0lBQ3pGLE9BQU87UUFDTCxjQUFjO1FBQ2QsUUFBUTtRQUNSLFFBQVE7S0FDVCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBVlksUUFBQSxTQUFTLGFBVXJCO0FBRU0sTUFBTSxjQUFjLEdBQUcsQ0FDNUIsTUFBYyxFQUNkLEtBV0MsRUFDRCxFQUFFO0lBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLEdBQUcsTUFBTSxVQUFVLEVBQUU7UUFDL0MsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ25CLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztRQUN0QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztRQUM5QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO0tBQzdCLENBQUMsQ0FBQTtJQUNGLE1BQU0sV0FBVyxHQUFHLElBQUEsa0NBQW9CLEVBQUMsR0FBRyxNQUFNLGFBQWEsRUFBRTtRQUMvRCxpQkFBaUIsRUFBRSxLQUFLLENBQUMsTUFBTTtRQUMvQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7UUFDbEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1FBQ2QsTUFBTSxFQUFFLE1BQU07S0FDZixDQUFDLENBQUE7SUFDRixNQUFNLEtBQUssR0FBRyxJQUFBLDRCQUFjLEVBQUMsR0FBRyxNQUFNLE9BQU8sRUFBRTtRQUM3QyxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDekMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1FBQ2xCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztRQUNkLFdBQVcsRUFBRSxXQUFXO0tBQ3pCLENBQUMsQ0FBQTtJQUNGLEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFBLCtCQUFzQixFQUFDLEdBQUcsTUFBTSxZQUFZLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUMzRixPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQTtBQUN6RCxDQUFDLENBQUE7QUF2Q1ksUUFBQSxjQUFjLGtCQXVDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInXG5pbXBvcnQge1xuICBjcmVhdGVBcGlEZXBsb3ltZW50LFxuICBjcmVhdGVBcGlHYXRld2F5LFxuICBjcmVhdGVBcGlJbnRlZ3JhdGlvbixcbiAgY3JlYXRlQXBpUm91dGUsXG4gIGNyZWF0ZUFwaVN0YWdlLFxufSBmcm9tICcuL2FwaS5nYXRld2F5J1xuaW1wb3J0IHsgY3JlYXRlTGFtYmRhLCBjcmVhdGVMYW1iZGFQZXJtaXNzaW9uIH0gZnJvbSAnLi9sYW1iZGEnXG5pbXBvcnQgeyBjcmVhdGVMb2dHcm91cCB9IGZyb20gJy4vbG9nJ1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQXBpID0gKHN0YWNrOiBjZGsuU3RhY2ssIGFsbG93SGVhZGVyczogc3RyaW5nW10pID0+IGNyZWF0ZUFwaUdhdGV3YXkoJ0FwaScsIHN0YWNrLCBhbGxvd0hlYWRlcnMpXG5cbmV4cG9ydCBjb25zdCBkZXBsb3lBcGkgPSAoc3RhY2s6IGNkay5TdGFjaywgYXBpOiBjZGsuYXdzX2FwaWdhdGV3YXl2Mi5DZm5BcGksIGRlcGVuZGVuY2llczogY2RrLkNmblJlc291cmNlW10pID0+IHtcbiAgY29uc3QgYXBpRGV2ZWxvcG1lbnQgPSBjcmVhdGVBcGlEZXBsb3ltZW50KCdBcGlEZXZlbG9wbWVudCcsIHN0YWNrLCBhcGkpXG4gIGRlcGVuZGVuY2llcy5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiBhcGlEZXZlbG9wbWVudC5hZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpKVxuICBjb25zdCBsb2dHcm91cCA9IGNyZWF0ZUxvZ0dyb3VwKCdMb2dHcm91cCcsIHN0YWNrLCBhcGkpXG4gIGNvbnN0IGFwaVN0YWdlID0gY3JlYXRlQXBpU3RhZ2UoJ0FwaVN0YWdlTmFtZScsIHsgc3RhY2ssIGFwaSwgYXBpRGV2ZWxvcG1lbnQsIGxvZ0dyb3VwIH0pXG4gIHJldHVybiB7XG4gICAgYXBpRGV2ZWxvcG1lbnQsXG4gICAgbG9nR3JvdXAsXG4gICAgYXBpU3RhZ2UsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVuZHBvaW50ID0gKFxuICBwcmVmaXg6IHN0cmluZyxcbiAgcHJvcHM6IHtcbiAgICBjb2RlVXJpOiBzdHJpbmdcbiAgICBoYW5kbGVyOiBzdHJpbmdcbiAgICBtZXRob2Q6IHN0cmluZ1xuICAgIHBhdGg6IHN0cmluZ1xuICAgIHN0YWNrOiBjZGsuU3RhY2tcbiAgICBhcGk6IGNkay5hd3NfYXBpZ2F0ZXdheXYyLkNmbkFwaVxuICAgIHNoYXJlZExheWVyOiBjZGsuYXdzX2xhbWJkYS5MYXllclZlcnNpb25cbiAgICBydW50aW1lPzogY2RrLmF3c19sYW1iZGEuUnVudGltZVxuICAgIG1lbW9yeVNpemU/OiBudW1iZXJcbiAgICBlbnZpcm9ubWVudD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbiAgfVxuKSA9PiB7XG4gIGNvbnN0IGxhbWJkYSA9IGNyZWF0ZUxhbWJkYShgJHtwcmVmaXh9RnVuY3Rpb25gLCB7XG4gICAgcGF0aDogcHJvcHMuY29kZVVyaSxcbiAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudCxcbiAgICBzdGFjazogcHJvcHMuc3RhY2ssXG4gICAgc2hhcmVkTGF5ZXI6IHByb3BzLnNoYXJlZExheWVyLFxuICAgIHJ1bnRpbWU6IHByb3BzLnJ1bnRpbWUsXG4gICAgbWVtb3J5U2l6ZTogcHJvcHMubWVtb3J5U2l6ZSxcbiAgfSlcbiAgY29uc3QgaW50ZWdyYXRpb24gPSBjcmVhdGVBcGlJbnRlZ3JhdGlvbihgJHtwcmVmaXh9SW50ZWdyYXRpb25gLCB7XG4gICAgaW50ZWdyYXRpb25NZXRob2Q6IHByb3BzLm1ldGhvZCxcbiAgICBzdGFjazogcHJvcHMuc3RhY2ssXG4gICAgYXBpOiBwcm9wcy5hcGksXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gIH0pXG4gIGNvbnN0IHJvdXRlID0gY3JlYXRlQXBpUm91dGUoYCR7cHJlZml4fVJvdXRlYCwge1xuICAgIHJvdXRlS2V5OiBgJHtwcm9wcy5tZXRob2R9ICR7cHJvcHMucGF0aH1gLFxuICAgIHN0YWNrOiBwcm9wcy5zdGFjayxcbiAgICBhcGk6IHByb3BzLmFwaSxcbiAgICBpbnRlZ3JhdGlvbjogaW50ZWdyYXRpb24sXG4gIH0pXG4gIHJvdXRlLmFkZERlcGVuZGVuY3koaW50ZWdyYXRpb24pXG4gIGNvbnN0IGxhbWJkYVBlcm1pc3Npb24gPSBjcmVhdGVMYW1iZGFQZXJtaXNzaW9uKGAke3ByZWZpeH1QZXJtaXNzaW9uYCwgcHJvcHMuc3RhY2ssIGxhbWJkYSlcbiAgcmV0dXJuIHsgbGFtYmRhLCBpbnRlZ3JhdGlvbiwgcm91dGUsIGxhbWJkYVBlcm1pc3Npb24gfVxufVxuIl19